version: "3.5"
services:
  database:
    container_name: db_postgres
    restart: always
    image: postgres:latest
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  rabbitmq:
    container_name: rabbitmq
    restart: always
    image: rabbitmq:latest
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongo:
    container_name: mongo
    restart: always
    image: mongo:latest
    env_file:
      - .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongo_data:/data/db

  solr:
    container_name: solr
    restart: always
    image: bitnami/solr:9.8.1
    ports:
      - 8983:8983
    env_file:
      - .env
    environment:
      # core setup
      - SOLR_CORES=activity,budget,budget_split_by_sector,dataset,organisation,publisher,result,transaction,transaction_trimmed,transaction_sdgs,draft_activity,draft_budget,draft_budget_split_by_sector,draft_dataset,draft_organisation,draft_result,draft_transaction,draft_transaction_trimmed,draft_transaction_sdgs
      # There is a SOLR_CORE_CONF_DIR available but currently only allows 1 config, we need 1 per core.
      - SOLR_OPTS=-Xms${MEM_SOLR_MIN}g -Xmx${MEM_SOLR_MAX}g
      # Authentication
      - SOLR_ENABLE_AUTHENTICATION=yes
      - SOLR_ADMIN_USERNAME=${SOLR_ADMIN_USERNAME}
      - SOLR_ADMIN_PASSWORD=${SOLR_ADMIN_PASSWORD}
    volumes:
      # Mount the image's /bitnami directory to the provided SOLR_VOLUME in .env,
      # default value is solr_data, a docker volume. Alternatively change it to a directory on the local drive,
      # such as a mounted directory, for example /opt/solr_data or /mnt/HC_Volume_N/solr_data
      - ${SOLR_VOLUME}:/bitnami

  solr-replication:
    container_name: solr-replication
    restart: always
    image: bitnami/solr:9.8.1
    ports:
      - 8983:8983
    env_file:
      - .env
    environment:
      # core setup
      - SOLR_CORES=activity,budget,budget_split_by_sector,dataset,organisation,publisher,result,transaction,transaction_trimmed,transaction_sdgs,draft_activity,draft_budget,draft_budget_split_by_sector,draft_dataset,draft_organisation,draft_result,draft_transaction,draft_transaction_trimmed,draft_transaction_sdgs
      # There is a SOLR_CORE_CONF_DIR available but currently only allows 1 config, we need 1 per core.
      - SOLR_OPTS=-Xms${MEM_SOLR_MIN}g -Xmx${MEM_SOLR_MAX}g
      # Authentication
      - SOLR_ENABLE_AUTHENTICATION=yes
      - SOLR_ADMIN_USERNAME=${SOLR_ADMIN_USERNAME}
      - SOLR_ADMIN_PASSWORD=${SOLR_ADMIN_PASSWORD}
    volumes:
      # Mount the image's /bitnami directory to the provided SOLR_FOLLOWER_VOLUME in .env,
      # default value is solr_follower_data, a docker volume. Alternatively change it to a directory on the local drive,
      # such as a mounted directory, for example /opt/solr_follower_data or /mnt/HC_Volume_N/solr_data
      - ${SOLR_FOLLOWER_VOLUME}:/bitnami

  iaticloud:
    container_name: iaticloud
    restart: always
    build: .
    image: iaticloud/main
    env_file:
      - .env
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      # Mount the local project directory to the container's /app directory
      - ./:/app
      - ./static:/static
    depends_on:
      - database
      - rabbitmq
      - mongo
      - solr
    ports:
      - 8000:8000

  celeryworker:
    container_name: celeryworker
    image: iaticloud/main
    volumes:
      - ./:/app
    env_file:
      - .env
    command: celery -A iaticloud worker -l INFO --concurrency=32 -n worker@%%h
    restart: unless-stopped
    depends_on:
      - rabbitmq
      - database
      - iaticloud

  celeryrevokeworker:
    container_name: celeryrevokeworker
    image: iaticloud/main
    volumes:
      - ./:/app
    env_file:
      - .env
    command: celery -A iaticloud worker -l INFO -n revoke@%%h -Q revoke_queue
    depends_on:
      - rabbitmq
      - database
      - iaticloud

  celeryaidaworker:
    container_name: celeryaidaworker
    image: iaticloud/main
    volumes:
      - ./:/app
    env_file:
      - .env
    command: celery -A iaticloud worker -l INFO --concurrency=4 -n aida@%%h -Q aida_queue
    depends_on:
      - rabbitmq
      - database
      - iaticloud

  celeryscheduler:
    container_name: celeryscheduler
    image: iaticloud/main
    volumes:
      - ./:/app
    env_file:
      - .env
    command: celery -A iaticloud beat -l INFO
    depends_on:
      - celeryworker
      - database
      - rabbitmq
      - iaticloud

  celeryflower:
    container_name: celeryflower
    image: iaticloud/main
    volumes:
      - ./:/app
    env_file:
      - .env
    command: celery -A iaticloud flower -l INFO --port=5555 --basic_auth=${CELERYFLOWER_USER}:${CELERYFLOWER_PASSWORD}
    depends_on:
      - celeryworker
      - celeryrevokeworker
      - celeryscheduler
      - database
      - rabbitmq
      - iaticloud
    ports:
      - 5555:5555

volumes:
  db_data:
  rabbitmq_data:
  mongo_data:
  solr_data:
  solr_follower_data:

"""
Django settings for iaticloud project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os  # CUSTOM ADDITION FOR .ENV USE
from pathlib import Path

from celery.schedules import crontab  # Added for celery scheduled tasks
from dotenv import load_dotenv

load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-f7*witax@a(&7p!zg_b_ougjt&3zsq&zjh@)c6)0%54naxd*6t')

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split()


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Local additions
    # Legacy currency converter
    'legacy_currency_convert.apps.LegacyCurrencyConvertConfig',
    # Celery
    'django_celery_beat',
    'django_celery_results',
    # Direct indexing
    'direct_indexing',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'iaticloud.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'iaticloud.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# CUSTOMIZED FOR POSTGRES
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
        'PORT': os.getenv('POSTGRES_PORT', 5432),
        'NAME': os.getenv('POSTGRES_DB', 'iati_cloud'),
        'USER': os.getenv('POSTGRES_USER', 'iati_cloud'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'oipa'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'CET'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = os.getenv('DJANGO_STATIC_URL', 'static/')
STATIC_ROOT = os.getenv('DJANGO_STATIC_ROOT', os.path.join(BASE_DIR, 'static/'))

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CELERY #
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # limiting the number of reserved tasks.
CELERY_TASK_ROUTES = {
    # Here we force specific tasks to flow through specified queues.
    # This allows us to simultaneously run multiple workers, each with different functions.
    # N for dataset processing, one for revoking tasks.
    'direct_indexing.tasks.revoke_all_tasks': {
        'queue': 'revoke_queue'
    },
}  # NOQA: E501
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'amqp://localhost')
CELERY_RESULT_BACKEND = 'django-db'
CELERY_BEAT_SCHEDULE = {
    # Include some automatically set up tasks, such as updating the exchange rates
    'Update the exchange rates': {
        'task': 'legacy_currency_convert.tasks.update_exchange_rates',
        'schedule': crontab(minute=0, hour=0),
    },
    # Add more default tasks here
}
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


# Function to convert .env boolean strings into boolean, defaults to false.
def env_bool(var_name, default='False'):
    return os.getenv(var_name, default) == 'True'


# FCDO Custom features
FCDO_INSTANCE = env_bool('FCDO_INSTANCE')

# Direct indexing custom features
# # Solr connection
# If you set the solr url, make sure to exclude the hashtag, but include /solr
SOLR_URL = os.getenv('SOLR_BASE_URL', 'http://localhost:8983/solr')
SOLR_PUBLISHER = f'{SOLR_URL}/publisher'
SOLR_PUBLISHER_URL = f'{SOLR_PUBLISHER}/update'
SOLR_DATASET = f'{SOLR_URL}/dataset'
SOLR_DATASET_URL = f'{SOLR_DATASET}/update'
SOLR_ACTIVITY = f'{SOLR_URL}/activity'
SOLR_ACTIVITY_URL = f'{SOLR_ACTIVITY}/update'
SOLR_TRANSACTION = f'{SOLR_URL}/transaction'
SOLR_TRANSACTION_URL = f'{SOLR_TRANSACTION}/update'
SOLR_TRANSACTION_TRIMMED = f'{SOLR_URL}/transaction_trimmed'
SOLR_TRANSACTION_TRIMMED_URL = f'{SOLR_TRANSACTION_TRIMMED}/update'
SOLR_TRANSACTION_SDGS = f'{SOLR_URL}/transaction_sdgs'
SOLR_TRANSACTION_SDGS_URL = f'{SOLR_TRANSACTION_SDGS}/update'
SOLR_BUDGET = f'{SOLR_URL}/budget'
SOLR_BUDGET_URL = f'{SOLR_BUDGET}/update'
SOLR_BUDGET_SDGS = f'{SOLR_URL}/budget_sdgs'
SOLR_BUDGET_SDGS_URL = f'{SOLR_BUDGET_SDGS}/update'
SOLR_RESULT = f'{SOLR_URL}/result'
SOLR_RESULT_URL = f'{SOLR_RESULT}/update'
SOLR_ORGANISATION = f'{SOLR_URL}/organisation'
SOLR_ORGANISATION_URL = f'{SOLR_ORGANISATION}/update'
# DRAFT CORES
SOLR_DRAFT_DATASET = f'{SOLR_URL}/draft_dataset'
SOLR_DRAFT_DATASET_URL = f'{SOLR_DRAFT_DATASET}/update'
SOLR_DRAFT_ACTIVITY = f'{SOLR_URL}/draft_activity'
SOLR_DRAFT_ACTIVITY_URL = f'{SOLR_DRAFT_ACTIVITY}/update'
SOLR_DRAFT_TRANSACTION = f'{SOLR_URL}/draft_transaction'
SOLR_DRAFT_TRANSACTION_URL = f'{SOLR_DRAFT_TRANSACTION}/update'
SOLR_DRAFT_TRANSACTION_TRIMMED = f'{SOLR_URL}/draft_transaction_trimmed'
SOLR_DRAFT_TRANSACTION_TRIMMED_URL = f'{SOLR_DRAFT_TRANSACTION_TRIMMED}/update'
SOLR_DRAFT_TRANSACTION_SDGS = f'{SOLR_URL}/draft_transaction_sdgs'
SOLR_DRAFT_TRANSACTION_SDGS_URL = f'{SOLR_DRAFT_TRANSACTION_SDGS}/update'
SOLR_DRAFT_BUDGET = f'{SOLR_URL}/draft_budget'
SOLR_DRAFT_BUDGET_URL = f'{SOLR_DRAFT_BUDGET}/update'
SOLR_DRAFT_BUDGET_SDGS = f'{SOLR_URL}/draft_budget_sdgs'
SOLR_DRAFT_BUDGET_SDGS_URL = f'{SOLR_DRAFT_BUDGET_SDGS}/update'
SOLR_DRAFT_RESULT = f'{SOLR_URL}/draft_result'
SOLR_DRAFT_RESULT_URL = f'{SOLR_DRAFT_RESULT}/update'
SOLR_DRAFT_ORGANISATION = f'{SOLR_URL}/draft_organisation'
SOLR_DRAFT_ORGANISATION_URL = f'{SOLR_DRAFT_ORGANISATION}/update'

# # IATI Data
METADATA_PUBLISHER_URL = 'https://registry.codeforiati.org/publisher_list.json'
METADATA_DATASET_URL = 'https://registry.codeforiati.org/dataset_list.json'
DATASET_URL = 'https://data.iati-data-dump.opendataservices.coop/data.zip'

# # PATHS
SOLR_POST_TOOL = os.path.join(BASE_DIR, 'direct_indexing/solr/bin/post')
DATASET_PARENT_PATH = os.path.join(BASE_DIR, 'direct_indexing/data_sources/datasets')
DATA_EXTRACTED_PATH = os.path.join(DATASET_PARENT_PATH, 'iati-data-main/data')
CURRENCIES_JSON = os.path.join(BASE_DIR, 'direct_indexing/data_sources/currency_monthlyaverage.json')
CODELISTS_JSON = os.path.join(BASE_DIR, 'direct_indexing/data_sources/codelists_dict.json')

# # Mongo
MONGO_CONNECTION_STRING = os.getenv('MONGO_CONNECTION_STRING', 'localhost:27017')

# # Debugging
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool('DEBUG', 'True')
THROTTLE_DATASET = env_bool('THROTTLE_DATASET', 'False')

# # Fresh dataset
FRESH = env_bool('FRESH', 'True')

# Origins for production
CSRF_TRUSTED_ORIGINS = [os.getenv('CSRF_TRUSTED_ORIGINS'), 'http://localhost/']
